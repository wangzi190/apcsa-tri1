{
  
    
        "post0": {
            "title": "Goals and Methods",
            "content": "My goals and methods for success APCSA and school or life in general are outlined here. . For APCSA: . I will review and record assignment objectives in my planner at the beginning of each week. | I will check in with my team when reviewing assignment objectives or project ideas. | By processing the instructions earlier, I will make starting assignments easier, and can better take advantage of class time. | . General help methods: . I record each of my tasks by category (i.e. school subject) and priority. I also mark each task with a percentage out of 100 (100% = my work for the day is complete) showing how big or difficult it is, so that I can make an accurate assessment of how much work I have or have not done. | I list tasks by part, and assign a number of points to each part. As I work, I count points on my abacus. | . I think happy people have to have clearly defined goals which work for them. That way, they can find ample time for their responsibilities and life’s necessities (fun, breaks, etc.) and feel good about themselves. . For my personal happiness, I want to better manage time so that I have time for all my interests. .",
            "url": "https://wangzi190.github.io/apcsa-tri1/2022/09/10/goals-and-methods.html",
            "relUrl": "/2022/09/10/goals-and-methods.html",
            "date": " • Sep 10, 2022"
        }
        
    
  
    
        ,"post1": {
            "title": "Boolean Expressions and If Statements",
            "content": "An &quot;if&quot; statement is a control structure where the code contained within the brackets of the statement is executed if the boolean attributed to it is true. For example, you could write an if statement stating: &quot;If x = 1, then...&quot; and the following code will only run if the condition, x = 1, is true. . int x = 1; if (x = 1) { //Fairly straightforward. If x = 1, the below code will run. //If x does not equal one, this code will not run at all. System.out.println(&quot;The boolean attributed to this if statement is true.&quot;); } . If-else, on the other hand, offers an alternative option in the case that the boolean is not true. Below is an example. . int x = 0; if (x = 1) { System.out.println(&quot;The boolean attributed to this if statement is true.&quot;); } else { System.out.println(&quot;The boolean attributed to this if statement is false, so the code inside the &#39;&#39;else&#39;&#39; brackets ran instead.&quot;); } . You can also create nested conditionals, or nested if or if-else statements (These are the statements referred to as if-else if-else on the APCSA Github pages. For convinience, I am just calling them nested conditionals.). Below is an example with 5 possible conditions. . int x = 5; if (x = 1) { //Here is the first if-else statement. System.out.println(&quot;Variable x is equal to 1.&quot;); } else { if (x = 2) { //Here is an if-else statement nested within the first one. System.out.println(&quot;Variable x is equal to 2.&quot;); } else { if (x = 3) { //Another if-else... System.out.println(&quot;Variable x is equal to 3.&quot;); } else { if (x = 4) { //Another... System.out.println(&quot;Variable x is equal to 4.&quot;); } else { System.out.println(&quot;Variable x is not equal to 1, 2, 3, or 4.&quot;); } } } } . For situations with many possible cases, you can also write a switch case. Below is the same example as above, only written as a switch case. . int x = 5; switch(x) { case 1: //Runs if the expression, x, is equal to 1. System.out.println(&quot;Variable x is equal to 1.&quot;); break; //The code will &quot;break&quot; out of the switch case at this point. //As in, the code from the &quot;break&quot; point onwards will not run. case 2: //Runs if the expression, x, is equal to 2. System.out.println(&quot;Variable x is equal to 2.&quot;); break; case 3: //Same idea as the above. System.out.println(&quot;Variable x is equal to 3.&quot;); break; case 4: //Same idea as the above. System.out.println(&quot;Variable x is equal to 4.&quot;); break; default: /*Runs if none of the above cases match the condition. Often used for error handling.*/ System.out.println(&quot;Variable x is not equal to 1, 2, 3, or 4.&quot;); break; } . Now, onto De Morgan&#39;s Law. In simple terms, De Morgan&#39;s law states that the conditional NOT(A and B) is the equivalent of NOT A or NOT B. Likewise, NOT(A or B) is the same as NOT A and NOT B. In Java code, these laws also hold true. Here is code to demonstrate: . boolean a = false; boolean b = false; /* ! is the &quot;not&quot; operator. !a means &quot;not a.&quot; &amp;&amp; is the &quot;and&quot; operator. a &amp;&amp; b means &quot;a and b.&quot; || is the &quot;or&quot; operator. a || b means &quot;a or b.&quot; The statement &quot;if a &amp;&amp; b&quot; will run if both a and b are true. The statement if &quot;!a &amp;&amp; !b&quot; will run if both a and b are false. Below is the example to show that De Morgan&#39;s law is valid. */ if ((!a &amp;&amp; !b) &amp;&amp; (!a || !b)) { System.out.println(&quot;If this line prints, it proves that (NOT(A and B)) and (NOT A or NOT B) can both be true. If this is true, then the reverse is also true. Therefore, De Morgan&#39;s law is valid.&quot;); } . If this line prints, it proves that (NOT(A and B)) and (NOT A or NOT B) can both be true. If this is true, then the reverse is also true. Therefore, De Morgan&#39;s law is valid. .",
            "url": "https://wangzi190.github.io/apcsa-tri1/2022/09/10/boolean-and-if.html",
            "relUrl": "/2022/09/10/boolean-and-if.html",
            "date": " • Sep 10, 2022"
        }
        
    
  
    
        ,"post2": {
            "title": "Week 2 Concepts",
            "content": "Because Java is an object-oriented programming language, data involved in Java programs are associated with classes and objects. A class is a “blueprint” for creating objects, and an object is an instance of a class. For example, if “animal” was a class, “bird” is an instance of that class. . Classes and objects are associated with attributes and methods. An attribute is data attributed to a class or object, while a method is a procedure associated with a class or object. Generally, a class will include attributes or methods which the object “inherits.” A Java method must be declared within a class. . Code.org lessons completed: image .",
            "url": "https://wangzi190.github.io/apcsa-tri1/2022/09/06/week-2-concepts.html",
            "relUrl": "/2022/09/06/week-2-concepts.html",
            "date": " • Sep 6, 2022"
        }
        
    
  
    
        ,"post3": {
            "title": "Title",
            "content": "",
            "url": "https://wangzi190.github.io/apcsa-tri1/2022/09/06/using-objects.html",
            "relUrl": "/2022/09/06/using-objects.html",
            "date": " • Sep 6, 2022"
        }
        
    
  
    
        ,"post4": {
            "title": "Extra Credit",
            "content": "Alumi Presentation Notes . Hi, these are my presentation notes. They are just for my reference, but here they are in case they are necessary for the credit. . I also stayed back to talk 1-on-1 with a few of the presenters about what learning computer science is like in college, and think I got some pretty good insight. But ultimately, the best insight will be experiencing all of these things for myself. Thank you for arranging this presentation, I found it inspirational and fun! . Computer science struggles . Frustration with debugging; being disciplined enough to patiently solve problems When entering computer science, don’t worry about what other people are doing and just stick to your own work and projects (i.e. have your own path set out and just do the best you can) Transition from coding in high school to background and theory in college Frustration with syntax distracting from thinking about logic, finding motivation Finding a specific project to apply compsci concepts to Difficult getting started sometimes Lack of rigid structure in advanced computer science . PBL Scenarios? . Make the most of any project opportunities you have, communicate with team members effectively College first few years is usually general education with large class sizes (very little 1-on-1 attention from teachers if any) Study and do PBL in groups Ask lots of questions . Applying CS if not in CS? . Writing a script to do boring or repetitive tasks MatLab requires some computer science knowledge Using CAD software (you can program the analysis and stress test in CAD) Applying problem solving logic instead of specifically doing code Computer science knowledge helps in high level math classes People using Jupyter notebooks for their technical papers (graphs, interactive components, text) CS even in stats and psychology . Internships? Take your internship stuff seriously LG internship working with APIs/internal API Technical drawing revisions and wiring diagrams, website for Northrop Grumman flight data . Data visualization Pathfinding algorithms . A lot of companies hire in Sept or November for the following summer . School/GPA are secondary to personal projects and internships etc. because your work is what will truly set you apart or testify how strong of a candidate you are .",
            "url": "https://wangzi190.github.io/apcsa-tri1/2022/09/06/extra-credit.html",
            "relUrl": "/2022/09/06/extra-credit.html",
            "date": " • Sep 6, 2022"
        }
        
    
  
    
        ,"post5": {
            "title": "Console Menu",
            "content": "import java.util.Scanner; import java.lang.Math; public class Menu { public final String[] kinematics = { &quot;vf = vi + a*t&quot;, &quot;x = vi*t + 0.5a*t^2&quot;, &quot;x = 0.5(vi + vf)t&quot;, &quot;(vf)^2 = (vi)^2 + 2ax&quot; }; public Menu() { Scanner sc = new Scanner(System.in); this.print(); boolean quit = false; while (!quit) { try { int choice = sc.nextInt(); //System.out.print(&quot;&quot; + choice + &quot;: &quot;); quit = this.action(choice); } catch (Exception e) { sc.nextLine(); System.out.println(e + &quot;: Not a number, try again.&quot;); } } sc.close(); } private void print() { System.out.println(&quot;- n&quot;); System.out.println(&quot;Select any of the following:&quot;); System.out.println(&quot;- n&quot;); System.out.println(&quot;0 - Print the kinematic equations&quot;); System.out.println(&quot;1 - Generate and solve a math problem&quot;); System.out.println(&quot;2 - Roll a 6-sided die and print the result&quot;); System.out.println(&quot;3 - Quit&quot;); System.out.println(&quot;- n&quot;); } private boolean action(int selection) { boolean quit = false; switch (selection) { case 0: for (int i = 0; i &lt; kinematics.length; i++) { System.out.println(kinematics[i]); } break; case 1: int x = (int)(Math.random() * 101); int y = (int)(Math.random() * 101); int operator = (int)(Math.random() * 2); int answer; if (operator == 0) { answer = x + y; System.out.println(&quot;Your generated math problem is &quot; + x + &quot; + &quot; + y + &quot;.&quot;); System.out.println(&quot;The answer to the problem is &quot; + answer + &quot;.&quot;); } else if (operator == 1) { if (x &gt; y) { answer = x - y; System.out.println(&quot;Your generated math problem is &quot; + x + &quot; - &quot; + y + &quot;.&quot;); } else { answer = y - x; System.out.println(&quot;Your generated math problem is &quot; + y + &quot; - &quot; + x + &quot;.&quot;); } System.out.println(&quot;The answer to the problem is &quot; + answer + &quot;.&quot;); } break; case 2: int roll = (int)(Math.random() * 7); System.out.println(&quot;You roll the 6-sided die, and get &quot; + roll + &quot;!&quot;); break; case 3: System.out.println(&quot;Quitting program..&quot;); quit = true; break; default: System.out.println(&quot;Invalid choice. Please try again.&quot;); } return quit; } static public void main(String[] args) { new Menu(); } } Menu.main(null); . - Select any of the following: - 0 - Print the kinematic equations 1 - Generate and solve a math problem 2 - Roll a 6-sided die and print the result 3 - Quit - vf = vi + a*t x = vi*t + 0.5a*t^2 x = 0.5(vi + vf)t (vf)^2 = (vi)^2 + 2ax Your generated math problem is 62 - 8. The answer to the problem is 54. Your generated math problem is 73 + 61. The answer to the problem is 134. You roll the 6-sided die, and get 5! You roll the 6-sided die, and get 4! Quitting program.. .",
            "url": "https://wangzi190.github.io/apcsa-tri1/2022/09/06/console-menu.html",
            "relUrl": "/2022/09/06/console-menu.html",
            "date": " • Sep 6, 2022"
        }
        
    
  
    
        ,"post6": {
            "title": "Title",
            "content": "//This is a Java program you can use to calculate the standard deviation of a data set. import java.util.Scanner; public class TemperatureConversion { public static void main(String[] args) { System.out.println(&quot;Print a temperate in Fahrenheit. The output will be that temperature in Celsius.&quot;); int i = 0; while (i != 1) { Scanner input = new Scanner (System.in); String num = input.nextLine(); if (num == &#39;f&#39;) { i = 1; } else { parseInt(num); numArray.push(num); } } double SD = calculateSD(numArray); System.out.format(&quot;Standard Deviation = %.6f&quot;, SD); } } . | if (num == &#39;f&#39;) { bad operand types for binary operator &#39;==&#39; first type: java.lang.String second type: char | parseInt(num); cannot find symbol symbol: method parseInt(java.lang.String) | numArray.push(num); cannot find symbol symbol: method push(java.lang.String) .",
            "url": "https://wangzi190.github.io/apcsa-tri1/2022/08/29/standarddev.html",
            "relUrl": "/2022/08/29/standarddev.html",
            "date": " • Aug 29, 2022"
        }
        
    
  
    
        ,"post7": {
            "title": "Primitives",
            "content": "Primitive data types, or &quot;primitives,&quot; are types of data with fixed definitions. Java has eight primitive data types: boolean, float, double, byte, short, int, long, and char. As a specific example, the &quot;short&quot; data type is a twos-complement integer stored in 16 bits. It is a primitive data type because its definition is fixed. . Accordingly, a non-primitive data type is one created by the programmer, and not defined by the programming language. Non-primitive data types in Java include Classes, Objects, Arrays, and Strings. . public class Main { String myStr = &quot;Creating an instance of a class&quot;; public static void main(String[] args) { Main newObject = new Main(); System.out.println(newObject.myStr); } } .",
            "url": "https://wangzi190.github.io/apcsa-tri1/2022/08/29/primitives.html",
            "relUrl": "/2022/08/29/primitives.html",
            "date": " • Aug 29, 2022"
        }
        
    
  
    
        ,"post8": {
            "title": "Downloads",
            "content": "Downloads . To verify tools we have installed, we can use commands such as “python –version” or “java –version” to check what version of the software we have installed. You can also install anything you don’t have using pip or via the sudo command. . image .",
            "url": "https://wangzi190.github.io/apcsa-tri1/2022/08/29/downloads.html",
            "relUrl": "/2022/08/29/downloads.html",
            "date": " • Aug 29, 2022"
        }
        
    
  
    
        ,"post9": {
            "title": "Cbunits",
            "content": "{ “cells”: [ { “cell_type”: “code”, “execution_count”: null, “metadata”: {}, “outputs”: [], “source”: [] } ], “metadata”: { “language_info”: { “name”: “python” }, “orig_nbformat”: 4 }, “nbformat”: 4, “nbformat_minor”: 2 } .",
            "url": "https://wangzi190.github.io/apcsa-tri1/2022/08/29/cbunits.html",
            "relUrl": "/2022/08/29/cbunits.html",
            "date": " • Aug 29, 2022"
        }
        
    
  
    
        ,"post10": {
            "title": "New Page",
            "content": "Title . Column 1 Column 2 Column 3 Column 4 Column 5 . This | is | Markdown |   |   | .   |   |   |   |   | .   |   |   |   |   | .",
            "url": "https://wangzi190.github.io/apcsa-tri1/newpage",
            "relUrl": "/newpage",
            "date": " • Aug 22, 2022"
        }
        
    
  
    
        ,"post11": {
            "title": "Title",
            "content": "System.out.println(&quot;Hello World!&quot;); . Hello World! .",
            "url": "https://wangzi190.github.io/apcsa-tri1/2022/08/22/helloworld.html",
            "relUrl": "/2022/08/22/helloworld.html",
            "date": " • Aug 22, 2022"
        }
        
    
  
    
        ,"post12": {
            "title": "Title",
            "content": "print(&quot;Hello World!&quot;) .",
            "url": "https://wangzi190.github.io/apcsa-tri1/2022/08/22/hellopython.html",
            "relUrl": "/2022/08/22/hellopython.html",
            "date": " • Aug 22, 2022"
        }
        
    
  
    
        ,"post13": {
            "title": "Fastpages Notebook Blog Post",
            "content": "About . This notebook is a demonstration of some of capabilities of fastpages with notebooks. . With fastpages you can save your jupyter notebooks into the _notebooks folder at the root of your repository, and they will be automatically be converted to Jekyll compliant blog posts! . Front Matter . The first cell in your Jupyter Notebook or markdown blog post contains front matter. Front matter is metadata that can turn on/off options in your Notebook. It is formatted like this: . # &quot;My Title&quot; &gt; &quot;Awesome summary&quot; - toc:true- branch: master - badges: true - comments: true - author: Hamel Husain &amp; Jeremy Howard - categories: [fastpages, jupyter] . Setting toc: true will automatically generate a table of contents | Setting badges: true will automatically include GitHub and Google Colab links to your notebook. | Setting comments: true will enable commenting on your blog post, powered by utterances. | . The title and description need to be enclosed in double quotes only if they include special characters such as a colon. More details and options for front matter can be viewed on the front matter section of the README. . Markdown Shortcuts . A #hide comment at the top of any code cell will hide both the input and output of that cell in your blog post. . A #hide_input comment at the top of any code cell will only hide the input of that cell. . The comment #hide_input was used to hide the code that produced this. . put a #collapse-hide flag at the top of any cell if you want to hide that cell by default, but give the reader the option to show it: . import pandas as pd import altair as alt . . put a #collapse-show flag at the top of any cell if you want to show that cell by default, but give the reader the option to hide it: . cars = &#39;https://vega.github.io/vega-datasets/data/cars.json&#39; movies = &#39;https://vega.github.io/vega-datasets/data/movies.json&#39; sp500 = &#39;https://vega.github.io/vega-datasets/data/sp500.csv&#39; stocks = &#39;https://vega.github.io/vega-datasets/data/stocks.csv&#39; flights = &#39;https://vega.github.io/vega-datasets/data/flights-5k.json&#39; . . place a #collapse-output flag at the top of any cell if you want to put the output under a collapsable element that is closed by default, but give the reader the option to open it: . print(&#39;The comment #collapse-output was used to collapse the output of this cell by default but you can expand it.&#39;) . The comment #collapse-output was used to collapse the output of this cell by default but you can expand it. . . Interactive Charts With Altair . Charts made with Altair remain interactive. Example charts taken from this repo, specifically this notebook. . Example 1: DropDown . # use specific hard-wired values as the initial selected values selection = alt.selection_single( name=&#39;Select&#39;, fields=[&#39;Major_Genre&#39;, &#39;MPAA_Rating&#39;], init={&#39;Major_Genre&#39;: &#39;Drama&#39;, &#39;MPAA_Rating&#39;: &#39;R&#39;}, bind={&#39;Major_Genre&#39;: alt.binding_select(options=genres), &#39;MPAA_Rating&#39;: alt.binding_radio(options=mpaa)} ) # scatter plot, modify opacity based on selection alt.Chart(df).mark_circle().add_selection( selection ).encode( x=&#39;Rotten_Tomatoes_Rating:Q&#39;, y=&#39;IMDB_Rating:Q&#39;, tooltip=&#39;Title:N&#39;, opacity=alt.condition(selection, alt.value(0.75), alt.value(0.05)) ) . Example 2: Tooltips . alt.Chart(df).mark_circle().add_selection( alt.selection_interval(bind=&#39;scales&#39;, encodings=[&#39;x&#39;]) ).encode( alt.X(&#39;Rotten_Tomatoes_Rating&#39;, type=&#39;quantitative&#39;), alt.Y(&#39;IMDB_Rating&#39;, type=&#39;quantitative&#39;, axis=alt.Axis(minExtent=30)), # y=alt.Y(&#39;IMDB_Rating:Q&#39;, ), # use min extent to stabilize axis title placement tooltip=[&#39;Title:N&#39;, &#39;Release_Date:N&#39;, &#39;IMDB_Rating:Q&#39;, &#39;Rotten_Tomatoes_Rating:Q&#39;] ).properties( width=500, height=400 ) . Example 3: More Tooltips . label = alt.selection_single( encodings=[&#39;x&#39;], # limit selection to x-axis value on=&#39;mouseover&#39;, # select on mouseover events nearest=True, # select data point nearest the cursor empty=&#39;none&#39; # empty selection includes no data points ) # define our base line chart of stock prices base = alt.Chart().mark_line().encode( alt.X(&#39;date:T&#39;), alt.Y(&#39;price:Q&#39;, scale=alt.Scale(type=&#39;log&#39;)), alt.Color(&#39;symbol:N&#39;) ) alt.layer( base, # base line chart # add a rule mark to serve as a guide line alt.Chart().mark_rule(color=&#39;#aaa&#39;).encode( x=&#39;date:T&#39; ).transform_filter(label), # add circle marks for selected time points, hide unselected points base.mark_circle().encode( opacity=alt.condition(label, alt.value(1), alt.value(0)) ).add_selection(label), # add white stroked text to provide a legible background for labels base.mark_text(align=&#39;left&#39;, dx=5, dy=-5, stroke=&#39;white&#39;, strokeWidth=2).encode( text=&#39;price:Q&#39; ).transform_filter(label), # add text labels for stock prices base.mark_text(align=&#39;left&#39;, dx=5, dy=-5).encode( text=&#39;price:Q&#39; ).transform_filter(label), data=stocks ).properties( width=500, height=400 ) . Data Tables . You can display tables per the usual way in your blog: . df[[&#39;Title&#39;, &#39;Worldwide_Gross&#39;, &#39;Production_Budget&#39;, &#39;Distributor&#39;, &#39;MPAA_Rating&#39;, &#39;IMDB_Rating&#39;, &#39;Rotten_Tomatoes_Rating&#39;]].head() . Title Worldwide_Gross Production_Budget Distributor MPAA_Rating IMDB_Rating Rotten_Tomatoes_Rating . 0 The Land Girls | 146083.0 | 8000000.0 | Gramercy | R | 6.1 | NaN | . 1 First Love, Last Rites | 10876.0 | 300000.0 | Strand | R | 6.9 | NaN | . 2 I Married a Strange Person | 203134.0 | 250000.0 | Lionsgate | None | 6.8 | NaN | . 3 Let&#39;s Talk About Sex | 373615.0 | 300000.0 | Fine Line | None | NaN | 13.0 | . 4 Slam | 1087521.0 | 1000000.0 | Trimark | R | 3.4 | 62.0 | . Images . Local Images . You can reference local images and they will be copied and rendered on your blog automatically. You can include these with the following markdown syntax: . ![](my_icons/fastai_logo.png) . . Remote Images . Remote images can be included with the following markdown syntax: . ![](https://image.flaticon.com/icons/svg/36/36686.svg) . . Animated Gifs . Animated Gifs work, too! . ![](https://upload.wikimedia.org/wikipedia/commons/7/71/ChessPawnSpecialMoves.gif) . . Captions . You can include captions with markdown images like this: . ![](https://www.fast.ai/images/fastai_paper/show_batch.png &quot;Credit: https://www.fast.ai/2020/02/13/fastai-A-Layered-API-for-Deep-Learning/&quot;) . . Other Elements . GitHub Flavored Emojis . Typing I give this post two :+1:! will render this: . I give this post two :+1:! . Tweetcards . Typing &gt; twitter: https://twitter.com/jakevdp/status/1204765621767901185?s=20 will render this: Altair 4.0 is released! https://t.co/PCyrIOTcvvTry it with: pip install -U altairThe full list of changes is at https://t.co/roXmzcsT58 ...read on for some highlights. pic.twitter.com/vWJ0ZveKbZ . &mdash; Jake VanderPlas (@jakevdp) December 11, 2019 . Youtube Videos . Typing &gt; youtube: https://youtu.be/XfoYk_Z5AkI will render this: . Boxes / Callouts . Typing &gt; Warning: There will be no second warning! will render this: . Warning: There will be no second warning! . Typing &gt; Important: Pay attention! It&#39;s important. will render this: . Important: Pay attention! It&#8217;s important. . Typing &gt; Tip: This is my tip. will render this: . Tip: This is my tip. . Typing &gt; Note: Take note of this. will render this: . Note: Take note of this. . Typing &gt; Note: A doc link to [an example website: fast.ai](https://www.fast.ai/) should also work fine. will render in the docs: . Note: A doc link to an example website: fast.ai should also work fine. . Footnotes . You can have footnotes in notebooks, however the syntax is different compared to markdown documents. This guide provides more detail about this syntax, which looks like this: . For example, here is a footnote {% fn 1 %}. And another {% fn 2 %} {{ &#39;This is the footnote.&#39; | fndetail: 1 }} {{ &#39;This is the other footnote. You can even have a [link](www.github.com)!&#39; | fndetail: 2 }} . For example, here is a footnote 1. . And another 2 . 1. This is the footnote.↩ . 2. This is the other footnote. You can even have a link!↩ .",
            "url": "https://wangzi190.github.io/apcsa-tri1/jupyter/2020/02/20/test.html",
            "relUrl": "/jupyter/2020/02/20/test.html",
            "date": " • Feb 20, 2020"
        }
        
    
  
    
        ,"post14": {
            "title": "An Example Markdown Post",
            "content": "Example Markdown Post . Basic setup . Jekyll requires blog post files to be named according to the following format: . YEAR-MONTH-DAY-filename.md . Where YEAR is a four-digit number, MONTH and DAY are both two-digit numbers, and filename is whatever file name you choose, to remind yourself what this post is about. .md is the file extension for markdown files. . The first line of the file should start with a single hash character, then a space, then your title. This is how you create a “level 1 heading” in markdown. Then you can create level 2, 3, etc headings as you wish but repeating the hash character, such as you see in the line ## File names above. . Basic formatting . You can use italics, bold, code font text, and create links. Here’s a footnote 1. Here’s a horizontal rule: . . Lists . Here’s a list: . item 1 | item 2 | . And a numbered list: . item 1 | item 2 | Boxes and stuff . This is a quotation . . You can include alert boxes …and… . . You can include info boxes Images . . Code . You can format text and code per usual . General preformatted text: . # Do a thing do_thing() . Python code and output: . # Prints &#39;2&#39; print(1+1) . 2 . Formatting text as shell commands: . echo &quot;hello world&quot; ./some_script.sh --option &quot;value&quot; wget https://example.com/cat_photo1.png . Formatting text as YAML: . key: value - another_key: &quot;another value&quot; . Tables . Column 1 Column 2 . A thing | Another thing | . Tweetcards . Altair 4.0 is released! https://t.co/PCyrIOTcvvTry it with: pip install -U altairThe full list of changes is at https://t.co/roXmzcsT58 ...read on for some highlights. pic.twitter.com/vWJ0ZveKbZ . &mdash; Jake VanderPlas (@jakevdp) December 11, 2019 Footnotes . This is the footnote. &#8617; . |",
            "url": "https://wangzi190.github.io/apcsa-tri1/markdown/2020/01/14/test-markdown-post.html",
            "relUrl": "/markdown/2020/01/14/test-markdown-post.html",
            "date": " • Jan 14, 2020"
        }
        
    
  

  
  

  
      ,"page1": {
          "title": "About Me",
          "content": "This website is powered by fastpages 1. . a blogging platform that natively supports Jupyter notebooks in addition to other formats. &#8617; . |",
          "url": "https://wangzi190.github.io/apcsa-tri1/about/",
          "relUrl": "/about/",
          "date": ""
      }
      
  

  

  
  

  

  
  

  

  
  

  
  

  
  

  
      ,"page10": {
          "title": "",
          "content": "Sitemap: {{ “sitemap.xml” | absolute_url }} | .",
          "url": "https://wangzi190.github.io/apcsa-tri1/robots.txt",
          "relUrl": "/robots.txt",
          "date": ""
      }
      
  

}